// setup codes generated by command: `npx express-generator api`
let express = require('express');
let router = express.Router();
let app = express();
let utils = require('../public/js/utils');
let multer = require('multer');

// cite from: https://www.digitalocean.com/community/tutorials/use-expressjs-to-get-url-and-post-parameters
let bodyParser = require('body-parser');
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended: true}));
// citation ends

// mongodb
// cite from: https://expressjs.com/en/guide/database-integration.html#mongodb
let MongoClient = require('mongodb').MongoClient;
let ObjectID = require('mongodb').ObjectID;

// upload images
let filenames;
// cited from: https://programmingwithmosh.com/javascript/react-file-upload-proper-server-side-nodejs-easy/
let storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'public')
    },
    filename: function (req, file, cb) {
        let filename = Date.now() + '-' + file.originalname;
        cb(null, filename)
        filenames.push(filename)
    }
})
var uploadArray = multer({storage: storage}).array('file');
let uploadSingle = multer({storage: storage}).single('file');

router.post('/upload', function (req, res, next) {
    filenames = [];
    uploadArray(req, res, function (err) {
        if (err instanceof multer.MulterError) {
            return res.status(500).json(err);
        } else if (err) {
            return res.status(500).json(err);
        }
        //return res.status(200).send(req.file);
        console.log("filenames:", filenames)
        res.send({status: 200, success: true, filenames: filenames});
    })
});
// citation ends


// create event
router.post('/create', function (req, res, next) {
    if (req.body.current_user_id) {
        let new_event = {
            user_id: req.body.current_user_id,
            title: req.body.title,
            category: req.body.category,
            date: req.body.date,
            description: req.body.description,
            likes: 0,
            private: JSON.parse(req.body.private),
            photo: req.body.photo,
            location: req.body.location
        };
        // add special fields
        for (let field in utils.categories[req.body.category]) {
            if (utils.categories[req.body.category][field] == "float") {
                new_event[field] = parseFloat(req.body[field]);
            } else if (utils.categories[req.body.category][field] == "int") {
                new_event[field] = parseInt(req.body[field]);
            } else if (utils.categories[req.body.category][field] == "bool") {
                new_event[field] = JSON.parse(req.body[field]);
            } else {
                new_event[field] = req.body[field];
            }
        }
        // modified from: https://stackoverflow.com/questions/47662220/db-collection-is-not-a-function-when-using-mongoclient-v3-0
        MongoClient.connect('mongodb://localhost:27017', function (connectionErr, client) {
            if (connectionErr) {
                res.send({success: false, msg: "DB connection failed."});
                throw connectionErr;
            }
            let db = client.db('Pawsgram');
            db.collection('events').insertOne(
                new_event,
                function (operationErr, insertedEvent) {
                    if (operationErr) {
                        res.send({success: false, msg: "DB insertion failed."});
                        throw operationErr;
                    }
                    // insert automatically generated events for memorial events
                    if (new_event.category == 'Memorial') {
                        // generate memorial events
                        let memorial_dates = utils.getMemorialEventDates(new_event.date);
                        // get today's date
                        // let today = new Date();
                        // let todayStr = today.getFullYear()+'/'+(today.getMonth()+1)+'/'+today.getDate();
                        // filter out future generated events
                        //memorial_dates = memorial_dates.filter(day => utils.compareDates(day.date, todayStr) <= 0);
                        let memorial_events = [];
                        for (let date_id in memorial_dates) {
                            let memorial_date = memorial_dates[date_id];
                            let memorial_event = {
                                ref_id: insertedEvent.insertedId,
                                user_id: new_event.user_id,
                                title: new_event.title + memorial_date.name,
                                category: "Generated",
                                date: memorial_date.date,
                                description: new_event.description,
                                likes: 0,
                                private: JSON.parse(new_event.private),
                                photo: new_event.photo,
                                location: new_event.location
                            }
                            memorial_events.push(memorial_event);
                        }
                        db.collection('events').insertMany(
                            memorial_events,
                            function (operationErr, event) {
                                if (operationErr) {
                                    res.send({success: false, msg: "DB find failed."});
                                    throw operationErr;
                                }
                                res.send({
                                    success: true,
                                    msg: "Successfully automatically generated events for memorial event. " + insertedEvent.insertedId
                                });
                                client.close();
                            }
                        );
                    } else {
                        res.send({success: true, msg: "Successfully created event." + insertedEvent.insertedId});
                        client.close();
                    }
                });
        });
    }
});

// timeline: show all events for an user (others only show public events, mine show public+private events)
router.post('/timeline', function (req, res, next) {
    let user_id;
    if (req.body.user_id) {
        //console.log("req.body.user_id",req.body.user_id)
        user_id = req.body.user_id;
    } else {
        //console.log("req.body.current_user_id",req.body.current_user_id)
        user_id = req.body.current_user_id;
    }
    //console.log("user_id:",user_id);
    //console.log("typeof user_id:",typeof(user_id))
    // modified from: https://stackoverflow.com/questions/47662220/db-collection-is-not-a-function-when-using-mongoclient-v3-0
    MongoClient.connect('mongodb://localhost:27017', function (connectionErr, client) {
        if (connectionErr) {
            res.send({success: false, msg: "DB connection failed."});
            throw connectionErr;
        }
        let db = client.db('Pawsgram');
        db.collection('events').find({user_id: user_id})
            //.sort({date: -1})
            .toArray(
                function (operationErr, events) {
                    if (operationErr) {
                        res.send({success: false, msg: "DB find failed."});
                        throw operationErr;
                    }
                    // filter out private events for non-self users
                    if (user_id != req.body.current_user_id) {
                        events = events.filter(event => event.private == false);
                    }
                    // get today's date
                    let today = new Date();
                    let todayStr = today.getFullYear() + '/' + (today.getMonth() + 1) + '/' + today.getDate();
                    // sort
                    events.sort(function (a, b) {
                        return utils.compareDates(b.date, a.date)
                    });
                    // get insert id for today event
                    let insert_id = utils.binarySearch(events, todayStr);
                    // detect if future events
                    for (let event_id = 0; event_id < events.length; event_id++) {
                        //if(utils.compareDates(events[event_id].date, todayStr) > 0){
                        if (event_id < insert_id) {
                            events[event_id].future = true;
                        } else {
                            events[event_id].future = false;
                        }
                    }
                    // insert today event
                    events.splice(insert_id, 0, {category: "Today", date: todayStr});
                    // include only one future generated event for each memorial event
                    let generated_future_events = {};
                    let result_events = [];
                    for (let i = 0; i < events.length; i++) {
                        let event = events[i];
                        if (event.category == "Generated" && event.future == true) {
                            if (!(event._id in generated_future_events)) {
                                generated_future_events[event.ref_id] = [];
                            }
                            generated_future_events[event.ref_id].push(event);
                        } else {
                            result_events.push(event);
                        }
                    }
                    for (let ref_id in generated_future_events) {
                        let generated_event_arr = generated_future_events[ref_id];
                        result_events.push(generated_event_arr[generated_event_arr.length - 1]);
                    }
                    result_events.sort(function (a, b) {
                        return utils.compareDates(b.date, a.date)
                    });
                    db.collection('users').findOne(
                        {_id: new ObjectID(user_id)},
                        {projection: {password: 0}},
                        function (operationErr2, user) {
                            if (operationErr2) {
                                res.send({success: false, msg: "DB find failed."});
                                throw operationErr2;
                            }
                            //console.log("user:",user);
                            res.send({
                                data: result_events,
                                user: user,
                                success: true,
                                msg: "Successfully load timeline for user."
                            });
                        });
                    client.close();
                });
    });
});

// for you page: show the latest public event for everyone (no future events)
router.post('/forYou', function (req, res, next) {
    // modified from: https://stackoverflow.com/questions/47662220/db-collection-is-not-a-function-when-using-mongoclient-v3-0
    MongoClient.connect('mongodb://localhost:27017', function (connectionErr, client) {
        if (connectionErr) {
            res.send({success: false, msg: "DB connection failed."});
            throw connectionErr;
        }
        let db = client.db('Pawsgram');
        let data = [];
        db.collection('users').find(
            {},
            {projection: {password: 0}}
        )
            .toArray(
                function (operationErr, users) {
                    if (operationErr) {
                        res.send({success: false, msg: "DB find failed."});
                        throw operationErr;
                    }
                    //console.log("users:",users);
                    for (let i = 0; i < users.length; i++) {
                        let user = users[i];
                        data.push({"user": user});
                        db.collection('events').find({user_id: user._id.toString()}) // user._id is ObjectID object, need to convert to string
                            // .sort({date: -1})
                            .toArray(function (operationErr2, events) {
                                if (operationErr2) {
                                    res.send({success: false, msg: "DB find failed."});
                                    throw operationErr2;
                                }
                                // filter out private events for non-self users
                                if (!('current_user_id' in req.body) || user._id.toString() != req.body.current_user_id) {
                                    events = events.filter(event => event.private == false);
                                }
                                // get today's date
                                let today = new Date();
                                let todayStr = today.getFullYear() + '/' + (today.getMonth() + 1) + '/' + today.getDate();
                                // sort
                                events.sort(function (a, b) {
                                    return utils.compareDates(b.date, a.date)
                                });
                                // get the latest event before tomorrow
                                let latest_id = utils.binarySearch(events, todayStr);
                                // exclude all future events / no events
                                //console.log("data:",data,"\ti:",i,"\tlatest_id:",latest_id);
                                if (latest_id < events.length) {
                                    data[i].event = events[latest_id];
                                }
                                // after last query
                                if (i == users.length - 1) {
                                    // do not display users with no past events
                                    data = data.filter(d => d.hasOwnProperty('event'));
                                    // order data by event date
                                    data.sort(function (a, b) {
                                        return utils.compareDates(b.event.date, a.event.date)
                                    });
                                    res.send({data: data, success: true, msg: "Successfully load for you page."});
                                }
                            });
                    }
                    client.close();
                });
    });
});

// like event
router.post('/like', function (req, res, next) {
    // modified from: https://stackoverflow.com/questions/47662220/db-collection-is-not-a-function-when-using-mongoclient-v3-0
    MongoClient.connect('mongodb://localhost:27017', function (connectionErr, client) {
        if (connectionErr) {
            res.send({success: false, msg: "DB connection failed."});
            throw connectionErr;
        }
        let db = client.db('Pawsgram');
        db.collection('events').update(
            {_id: new ObjectID(req.body.event_id)},
            {$inc: {likes: 1}},
            function (operationErr, event) {
                if (operationErr) {
                    res.send({success: false, msg: "DB find failed."});
                    throw operationErr;
                }
                res.send({success: true, msg: "Successfully liked event " + req.body.event_id});
                client.close();
            });
    });
});

module.exports = router;
